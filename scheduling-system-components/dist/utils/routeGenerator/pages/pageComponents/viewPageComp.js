"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.generateViewPage = generateViewPage;
// Helper function to format entity name (keep it consistent with storeGenerator)
function formatEntityName(name) {
    return name
        .replace(/[-\s]+/g, '_')
        .split('_')
        .map(function (word, index) {
        var capitalized = word.charAt(0).toUpperCase() + word.slice(1).toLowerCase();
        return index === 0 ? capitalized.toLowerCase() : capitalized;
    })
        .join('');
}
function generateViewPage(config) {
    var formattedEntityName = formatEntityName(config.entityName);
    var dateColumns = config.attributes
        .filter(function (attr) { return ['date', 'datetime', 'timestamp', 'time', 'datetime-local']
        .some(function (type) { return attr.dataType.toLowerCase().includes(type); }); })
        .map(function (attr) { return "'".concat(attr.name, "'"); });
    return "\n    'use client';\n    import { useEffect, useState } from 'react';\n    import { useRouter } from 'next/navigation';\n    import DefaultLayout from \"@/components/Layouts/DefaultLayout\";\n    import { use".concat(formattedEntityName, "Store } from '@/store/").concat(config.entityName.toLowerCase(), "Store';\n    import { ArrowLeft } from 'lucide-react';\n\n    // Helper function to format field labels\n    function formatFieldLabel(name: string): string {\n      return name\n        .split(/[_\\s]+/)\n        .map(word => word.charAt(0).toUpperCase() + word.slice(1).toLowerCase())\n        .join(' ');\n    }\n\n    export default function ").concat(formattedEntityName, "ViewPage({ params }: { params: { id: string } }) {\n      const router = useRouter();\n      const { loading, error, fetchRecord } = use").concat(formattedEntityName, "Store();\n      const [currentRecord, setCurrentRecord] = useState<any>(null);\n      const DateFormatColumns = [").concat(dateColumns.join(', '), "];\n       \n      const formatDateTime = (inputDate) => {\n      if (!inputDate) return \"\";\n      const date = new Date(inputDate.replace(\" \", \"T\")); // Convert \"YYYY-MM-DD HH:mm\" to ISO format\n      return date.toLocaleString(\"en-US\", {\n        month: \"2-digit\",\n        day: \"2-digit\",\n        year: \"numeric\",\n        hour: \"2-digit\",\n        minute: \"2-digit\",\n        hour12: true\n      });\n    };\n\n\n\n      useEffect(() => {\n        const fetchData = async () => {\n        const record = await fetchRecord(params.id);\n        const formattedRecord = { ...record };\n       DateFormatColumns.forEach(columnName => {\n        if (formattedRecord[columnName]) {\n          formattedRecord[columnName] = formatDateTime(formattedRecord[columnName]);\n        }\n      });\n          setCurrentRecord(formattedRecord);\n      }\n      fetchData();\n      \n      }, [params.id]);\n\n      if (loading) return <div>Loading...</div>;\n      if (!currentRecord) return <div>Record not found</div>;\n\n      return (\n        <DefaultLayout>\n          <div className=\"p-2\">\n            <div className=\"flex flex-col gap-9\">\n              <div className=\"rounded-sm border border-stroke bg-white shadow-default dark:border-strokedark dark:bg-boxdark\">\n                <div className=\"border-b border-stroke px-6.5 py-4 dark:border-strokedark\">\n                  <div className=\"flex justify-between items-center\">\n                    <h3 className=\"text-xl font-bold text-black dark:text-white\">\n                      ").concat(formattedEntityName, " Details\n                    </h3>\n                    <button\n                      onClick={() => router.back()}\n                      className=\"inline-flex items-center justify-center gap-2.5 rounded-md bg-primary px-6 py-2.5 text-center font-medium text-white hover:bg-opacity-90\"\n                    >\n                      <ArrowLeft size={20} />\n                      Back\n                    </button>\n                  </div>\n                </div>\n\n                <div className=\"p-6.5\">\n                  <div className=\"grid grid-cols-2 gap-6\">\n                    ").concat(config.attributes.map(function (attr) { return "\n                      <div className=\"col-span-1\">\n                        <h4 className=\"text-sm font-bold text-black dark:text-white mb-2\">\n                           ".concat(attr.name.split(/[_\s]+/).map(function (word) { return word.charAt(0).toUpperCase() + word.slice(1).toLowerCase(); }).join(' '), "\n                        </h4>\n                        <p className=\"text-base text-gray-600 dark:text-gray-400\">\n                           {currentRecord['").concat(attr.name.replace(/\s+/g, '-'), "']}\n                        </p>\n                      </div>\n                    "); }).join(''), "\n                  </div>\n                </div>\n              </div>\n            </div>\n          </div>\n        </DefaultLayout>\n      );\n    }\n  ");
}
