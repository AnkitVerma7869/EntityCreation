"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.generateListPage = generateListPage;
function generateListPage(config) {
    return "\n    'use client';\n    import { useState, useEffect } from 'react';\n    import { useRouter } from 'next/navigation';\n    import { \n      DataGrid, \n      GridColDef,\n      GridToolbar,\n      GridPaginationModel,\n      GridRenderCellParams\n    } from '@mui/x-data-grid';\n    import { Box } from '@mui/material';\n\n    interface Record {\n      id: string | number;\n      ".concat(config.attributes.map(function (attr) {
        return "".concat(attr.name.replace(/\s+/g, '_'), ": ").concat(attr.dataType.toLowerCase() === 'number' ? 'number' : 'string', ";");
    }).join('\n      '), "\n      createdAt?: string;\n    }\n\n    export default function ").concat(config.entityName.replace(/\s+/g, ''), "ListPage() {\n      const [records, setRecords] = useState<Record[]>([]);\n      const [loading, setLoading] = useState(true);\n      const [error, setError] = useState('');\n      const router = useRouter();\n\n      useEffect(() => {\n        fetchRecords();\n      }, []);\n\n      const fetchRecords = async () => {\n        try {\n          const response = await fetch('/api/").concat(config.entityName.toLowerCase(), "/list');\n          const result = await response.json();\n          if (result.success) {\n            setRecords(result.data);\n          } else {\n            setError(result.error || 'Failed to fetch records');\n          }\n        } catch (err) {\n          setError('Failed to fetch records');\n        } finally {\n          setLoading(false);\n        }\n      };\n\n      const handleDelete = async (id: string | number) => {\n        if (!confirm('Are you sure you want to delete this record?')) return;\n        \n        try {\n          const response = await fetch(`/api/").concat(config.entityName.toLowerCase(), "/delete?id=${id}`, {\n            method: 'DELETE'\n          });\n          const result = await response.json();\n          if (result.success) {\n            fetchRecords();\n          } else {\n            alert(result.error || 'Failed to delete record');\n          }\n        } catch (err) {\n          alert('Failed to delete record');\n        }\n      };\n\n      const columns: GridColDef[] = [\n        ").concat(config.attributes.map(function (attr) { return "\n          {\n            field: '".concat(attr.name.replace(/\s+/g, '_'), "',\n            headerName: '").concat(attr.name, "',\n            flex: 1\n          }"); }).join(','), "\n        ,{\n          field: 'actions',\n          headerName: 'Actions',\n          flex: 1,\n          renderCell: (params: GridRenderCellParams) => (\n            <div className=\"flex gap-2\">\n              <button\n                onClick={() => router.push(`/").concat(config.entityName.toLowerCase(), "/view/${params.row.id}`)}\n                className=\"px-3 py-1 bg-blue-500 text-white rounded hover:bg-blue-600\"\n              >\n                View\n              </button>\n              <button\n                onClick={() => router.push(`/").concat(config.entityName.toLowerCase(), "/edit/${params.row.id}`)}\n                className=\"px-3 py-1 bg-green-500 text-white rounded hover:bg-green-600\"\n              >\n                Edit\n              </button>\n              <button\n                onClick={() => handleDelete(params.row.id)}\n                className=\"px-3 py-1 bg-red-500 text-white rounded hover:bg-red-600\"\n              >\n                Delete\n              </button>\n            </div>\n          )\n        }\n      ];\n\n      if (loading) return <div>Loading...</div>;\n      if (error) return <div>Error: {error}</div>;\n\n      return (\n        <div className=\"p-6\">\n          <div className=\"flex justify-between items-center mb-6\">\n            <h1 className=\"text-2xl font-bold\">").concat(config.entityName, " List</h1>\n            <button\n              onClick={() => router.push(`/").concat(config.entityName.toLowerCase(), "/create`)}\n              className=\"px-4 py-2 bg-green-500 text-white rounded hover:bg-green-600\"\n            >\n              Create New\n            </button>\n          </div>\n\n          <Box sx={{ height: 400, width: '100%' }}>\n            <DataGrid\n              rows={records}\n              columns={columns}\n              slots={{\n                toolbar: GridToolbar,\n              }}\n              initialState={{\n                pagination: {\n                  paginationModel: { pageSize: 10 },\n                },\n              }}\n              pageSizeOptions={[5, 10, 25]}\n              disableRowSelectionOnClick\n            />\n          </Box>\n        </div>\n      );\n    }\n  ");
}
